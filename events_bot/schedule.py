from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.error import TelegramError
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters
from events_bot.views import get_program, serialize_current_events, get_staff_ids, send_question
from environs import Env


def get_main_keyboard(is_manager=False, is_speaker=False):
    keyboard = [[InlineKeyboardButton("üìÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞", callback_data='schedule'), InlineKeyboardButton(
        "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data='ask_speaker')]]
    if is_manager:
        # –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
        keyboard.append([InlineKeyboardButton(
            "–ó–∞–≥–ª—É—à–∫–∞", callback_data='manager')])
    if is_speaker:
        # –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ø–∏–∫–µ—Ä–∞
        keyboard.append([InlineKeyboardButton(
            "–ó–∞–≥–ª—É—à–∫–∞", callback_data='speaker')])
    return InlineKeyboardMarkup(keyboard)


def get_ask_speaker_keyboard(speakers):
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]]
    for speaker in speakers:
        if speaker.telegram_username:
            keyboard.append([InlineKeyboardButton(
                speaker.name, callback_data=f"ask_{speaker.telegram_username}")])
        else:
            continue
    return InlineKeyboardMarkup(keyboard)


def get_confirm_question_keyboard():
    keyboard = [
        [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm_question'),
         InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='cancel_question')]
    ]
    return InlineKeyboardMarkup(keyboard)


def start(update: Update, context):
    staff_ids = get_staff_ids()
    manager_ids = staff_ids.get('manager_ids', [])
    speaker_ids = staff_ids.get('speaker_ids', [])
    is_manager = update.message.from_user.id in manager_ids
    is_speaker = update.message.from_user.id in speaker_ids
    context.user_data.update({
        'is_manager': is_manager,
        'is_speaker': is_speaker,
    })
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç PythonMeetup. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard(is_manager)
    )


def schedule(update: Update, context):
    query = update.callback_query
    query.answer()
    program = get_program()
    if not program:
        query.message.reply_text(
            "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.", reply_markup=get_main_keyboard())
        return
    response = "–ü—Ä–æ–≥—Ä–∞–º–º–∞ PythonMeetup:\n"
    for event in program:
        response += event
    query.message.reply_text(response, reply_markup=get_main_keyboard())


def ask_speaker(update: Update, context):
    query = update.callback_query
    query.answer()
    raw_info = serialize_current_events()
    current_events = raw_info.get("events")
    if not current_events:
        query.message.reply_text(
            "–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫–ª–∞–¥–æ–≤.", reply_markup=get_main_keyboard())
        return
    response = "–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–æ–∫–ª–∞–¥—ã:\n"
    for event in current_events:
        response += f"{event}\n"
    response += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫–ª–∞–¥—á–∏–∫–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤:\n"
    current_speakers = raw_info.get("speakers")
    query.message.reply_text(
        response, reply_markup=get_ask_speaker_keyboard(current_speakers))
    context.user_data['state'] = 'selecting_speaker'


def process_speaker_selection(update: Update, context):
    query = update.callback_query
    query.answer()

    if query.data == 'back':
        query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
        context.user_data.clear()
        return

    if query.data.startswith('ask_'):
        telegram_username = query.data.split('_', 1)[1]

        context.user_data.update({
            'state': 'awaiting_question',
            'telegram_username': telegram_username,
        })

        query.edit_message_text(
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    "‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel_question')]
            ])
        )
    else:
        query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
        context.user_data.clear()


def process_question(update: Update, context):
    if context.user_data.get('state') != 'awaiting_question':
        print(context.user_data.get('state'))
        return
    speaker_username = context.user_data.get('telegram_username')
    participant_id = update.message.from_user.id
    participant_name = update.message.from_user.first_name
    text = update.message.text
    try:
        context.user_data.update({
            'state': 'confirming_question',
            'question': {
                'speaker_username': speaker_username,
                'participant_id': participant_id,
                'participant_name': participant_name,
                'text': text
            }
        })
        keyboard = get_confirm_question_keyboard()
        if not keyboard:
            update.message.reply_text(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        update.message.reply_text(
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{text}\n\n–ö —Å–ø–∏–∫–µ—Ä—É: {speaker_username}",
            reply_markup=keyboard
        )

    except Exception as err:
        update.message.reply_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {err}, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–∑–∂–µ", reply_markup=get_main_keyboard())
        context.user_data['state'] = None
        context.user_data['telegram_username'] = None



def confirm_question(update: Update, context):
    query = update.callback_query
    query.answer()

    if context.user_data.get('state') != 'confirming_question':
        query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                 reply_markup=get_main_keyboard())
        context.user_data.clear()
        return

    if query.data == 'confirm_question':
        question_data = context.user_data.get('question')
        if not question_data:
            query.message.reply_text(
                "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=get_main_keyboard())
            return
        try:
            send_question(
                speaker_username=question_data.get('speaker_username'),
                participant_id=question_data.get('participant_id'),
                participant_name=question_data.get('participant_name'),
                text=question_data.get('text')
            )
            query.message.reply_text(
                "–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", reply_markup=get_main_keyboard())
        except Exception as err:
            query.message.reply_text(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {err}, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–∑–∂–µ", reply_markup=get_main_keyboard())
            raise err
    elif query.data == 'cancel_question':
        query.message.reply_text(
            "–í–æ–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=get_main_keyboard())
    else:
        query.message.reply_text(
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫", reply_markup=get_main_keyboard())

    context.user_data.clear()


def main():
    env = Env()
    env.read_env()
    tg_bot_token = env.str("TG_BOT_TOKEN")
    updater = Updater(tg_bot_token, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(schedule, pattern='schedule'))
    dp.add_handler(CallbackQueryHandler(ask_speaker, pattern='ask_speaker'))
    dp.add_handler(CallbackQueryHandler(
        process_speaker_selection, pattern='(ask_@[\w]+|back)'))
    dp.add_handler(MessageHandler(Filters.all, process_question))
    dp.add_handler(CallbackQueryHandler(confirm_question,
                   pattern='(confirm_question|cancel_question)'))
    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
