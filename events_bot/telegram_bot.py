from telegram.ext import (
    Updater,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    Filters,
    ConversationHandler
)
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    BotCommand,
    Update
)
from django.conf import settings
from events_bot.models import Event, Participant, Donation
from yookassa import Payment, Configuration
import uuid
from django.utils import timezone

from events_bot.views import get_staff_ids, send_question


(
    CHOOSE_CUSTOM_AMOUNT,

    SELECTING_SPEAKER,
    AWAITING_QUESTION,
    CONFIRMING_QUESTION
) = range(4)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ÆKassa
Configuration.account_id = settings.YOOKASSA_SHOP_ID
Configuration.secret_key = settings.YOOKASSA_SECRET_KEY


def get_main_keyboard():
    """–ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        ["üìÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞", "üéÅ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å"],
        ["üôã–ü–æ–æ–±—â–∞—Ç—å—Å—è", "üìã–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–∏–∫–µ—Ä—É"],
        ["–ö—Ç–æ –≤—ã—Å—Ç—É–ø–∞–µ—Ç —Å–µ–π—á–∞—Å?"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


def start(update, context):
    user = update.message.from_user
    Participant.objects.get_or_create(
        telegram_id=user.id,
        defaults={
            'telegram_username': user.username,
            'name': user.first_name or '–ê–Ω–æ–Ω–∏–º'
        }
    )

    event = Event.objects.filter(is_active=True).first()
    event_name = event.title if event else "Python Meetup"

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
    main_menu_keyboard = [
        ["üìÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞", "üéÅ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å"],
        ["üôã–ü–æ–æ–±—â–∞—Ç—å—Å—è", "üìã–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–∏–∫–µ—Ä—É"],
        ["–ö—Ç–æ –≤—ã—Å—Ç—É–ø–∞–µ—Ç —Å–µ–π—á–∞—Å?"]
    ]

    update.message.reply_text(
        f"‚ú® <b>–ü—Ä–∏–≤–µ—Ç, {user.first_name}!</b> ‚ú®\n\n"
        f"–Ø –±–æ—Ç –¥–ª—è <i>{event_name}</i>\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(
            main_menu_keyboard,
            resize_keyboard=True,
            one_time_keyboard=False
        ),
        parse_mode='HTML'
    )


def program(update, context):
    event = Event.objects.filter(is_active=True).first()
    if event:
        program_text = event.get_program()
        update.message.reply_text(
            f"üìú <b>–ü—Ä–æ–≥—Ä–∞–º–º–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:</b>\n\n"
            f"{program_text}\n\n"
            f"<i>–ñ–¥–µ–º –≤–∞—Å {event.date.strftime('%d.%m.%Y')}!</i>",
            parse_mode='HTML'
        )
    else:
        update.message.reply_text(
            "üì≠ –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n"
            "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –∞–Ω–æ–Ω—Å–∞–º–∏!",
            parse_mode='HTML'
        )


def donate(update, context):
    if not Event.objects.filter(is_active=True).exists():
        update.message.reply_text(
            "üôÖ‚Äç‚ôÇÔ∏è <b>–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π</b>\n"
            "–î–æ–Ω–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
            parse_mode='HTML'
        )
        return

    keyboard = [
        [InlineKeyboardButton("üíµ 100 ‚ÇΩ", callback_data='donate_100')],
        [InlineKeyboardButton("üíµ 300 ‚ÇΩ", callback_data='donate_300')],
        [InlineKeyboardButton("üíµ 500 ‚ÇΩ", callback_data='donate_500')],
        [InlineKeyboardButton("‚ú® –î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data='donate_custom')],
    ]
    update.message.reply_text(
        "üéÅ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞:</b>\n"
        "–í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å –∫–æ–º—å—é–Ω–∏—Ç–∏!",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )


def handle_fixed_donate_callback(update, context):
    query = update.callback_query
    query.answer()

    if not Event.objects.filter(is_active=True).exists():
        query.edit_message_text("üôÖ‚Äç‚ôÇÔ∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –¥–æ–Ω–∞—Ç–∞")
        return ConversationHandler.END

    try:
        amount = int(query.data.split('_')[1])
        create_payment(update, context, amount)
    except (IndexError, ValueError):
        query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã.")
    return ConversationHandler.END


def handle_custom_donate_callback(update, context):
    query = update.callback_query
    query.answer()

    if not Event.objects.filter(is_active=True).exists():
        query.edit_message_text("üôÖ‚Äç‚ôÇÔ∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –¥–æ–Ω–∞—Ç–∞")
        return ConversationHandler.END

    query.edit_message_text(
        "üí´ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞ –≤ —Ä—É–±–ª—è—Ö</b>\n"
        "(–æ—Ç 10 –¥–æ 15000):",
        parse_mode='HTML'
    )
    return CHOOSE_CUSTOM_AMOUNT


def handle_custom_amount(update, context):
    try:
        amount = int(update.message.text.strip())
        if amount < 10 or amount > 15000:
            update.message.reply_text(
                "‚ö†Ô∏è <b>–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 10 –¥–æ 15000 ‚ÇΩ</b>\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:",
                parse_mode='HTML'
            )
            return CHOOSE_CUSTOM_AMOUNT

        create_payment(update, context, amount)
        return ConversationHandler.END

    except ValueError:
        update.message.reply_text(
            "üî¢ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ</b>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 250 –∏–ª–∏ 1000",
            parse_mode='HTML'
        )
        return CHOOSE_CUSTOM_AMOUNT


def cancel(update, context):
    update.message.reply_text(
        "‚ùå <b>–î–æ–Ω–∞—Ç –æ—Ç–º–µ–Ω—ë–Ω</b>\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —ç—Ç–æ–º—É –ø–æ–∑–∂–µ",
        parse_mode='HTML'
    )
    return ConversationHandler.END


def create_payment(update, context, amount):
    if update.callback_query:
        user = update.callback_query.from_user
        chat_id = update.callback_query.message.chat_id
    else:
        user = update.message.from_user
        chat_id = update.message.chat_id

    event = Event.objects.filter(is_active=True).first()
    if not event:
        error_msg = "üôÖ‚Äç‚ôÇÔ∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –¥–æ–Ω–∞—Ç–∞"
        if update.callback_query:
            update.callback_query.edit_message_text(error_msg)
        else:
            update.message.reply_text(error_msg)
        return

    participant, _ = Participant.objects.get_or_create(
        telegram_id=user.id,
        defaults={
            'telegram_username': user.username,
            'name': user.first_name or '–ê–Ω–æ–Ω–∏–º'
        }
    )

    try:
        payment = Payment.create({
            "amount": {"value": str(amount), "currency": "RUB"},
            "confirmation": {
                "type": "redirect",
                "return_url": f"https://t.me/{settings.TG_BOT_USERNAME}"
            },
            "description": f"–î–æ–Ω–∞—Ç –Ω–∞ {event.title}",
            "metadata": {
                "user_id": user.id,
                "event_id": event.id
            }
        }, str(uuid.uuid4()))

        Donation.objects.create(
            event=event,
            participant=participant,
            amount=amount,
            payment_id=payment.id,
            is_confirmed=True
        )

        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton(
            "üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ",
            url=payment.confirmation.confirmation_url
        )]])

        message = f"<b>–û–ø–ª–∞—Ç–∞ {amount}‚ÇΩ</b>\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
        if update.callback_query:
            update.callback_query.edit_message_text(message, reply_markup=reply_markup, parse_mode='HTML')
        else:
            context.bot.send_message(chat_id, message, reply_markup=reply_markup, parse_mode='HTML')

        context.bot.send_message(
            chat_id=chat_id,
            text=f"‚ú® <b>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ä–µ—à–∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, {user.first_name}!</b>\n\n"
                 f"–í–∞—à –¥–æ–Ω–∞—Ç {amount}‚ÇΩ ‚Äî —ç—Ç–æ:\n"
                 f"‚Ä¢ ‚òï 10 —á–∞—à–µ–∫ –∫–æ—Ñ–µ –¥–ª—è —Å–ø–∏–∫–µ—Ä–æ–≤\n"
                 f"‚Ä¢ üìö –ù–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                 f"‚Ä¢ üíª –õ—É—á—à–µ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π\n\n"
                 f"<i>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –∫–æ–º—å—é–Ω–∏—Ç–∏!</i>",
            parse_mode='HTML'
        )

    except Exception as e:
        error_msg = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞</b>\n{str(e)}"
        if update.callback_query:
            update.callback_query.edit_message_text(error_msg, parse_mode='HTML')
        else:
            context.bot.send_message(chat_id, error_msg, parse_mode='HTML')


def current_speaker(update, context):
    event = Event.objects.filter(is_active=True).first()
    if not event:
        update.message.reply_text(
            "üì≠ –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π",
            parse_mode='HTML'
        )
        return

    now = timezone.now()
    current_slot = event.get_current_speaker()

    if current_slot:
        speaker = current_slot.speaker
        update.message.reply_text(
            f"üé§ <b>–°–µ–π—á–∞—Å –≤—ã—Å—Ç—É–ø–∞–µ—Ç:</b>\n\n"
            f"üë§ <b>{speaker.name}</b>\n"
            f"üì¢ <i>{current_slot.title}</i>\n"
            f"üïí {current_slot.start_time.strftime('%H:%M')}-{current_slot.end_time.strftime('%H:%M')}\n\n"
            f"{current_slot.description}\n\n"
            f"‚ÑπÔ∏è {speaker.bio if speaker.bio else '–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'}",
            parse_mode='HTML'
        )
    else:
        update.message.reply_text(
            "‚è≥ <b>–°–µ–π—á–∞—Å –ø–µ—Ä–µ—Ä—ã–≤ –∏–ª–∏ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ</b>\n\n"
            "–°–ª–µ–¥—É—é—â–µ–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ",
            parse_mode='HTML'
        )


def get_ask_speaker_keyboard(speakers):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–∏–∫–µ—Ä–∞"""
    keyboard = []
    for speaker in speakers:
        if speaker.telegram_username:
            keyboard.append(
                [InlineKeyboardButton(speaker.name, callback_data=f"ask_{speaker.telegram_username}")]
            )
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')])
    return InlineKeyboardMarkup(keyboard)


def ask_speaker_start(update, context):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞"""
    event = Event.objects.filter(is_active=True).first()
    if not event:
        update.message.reply_text("–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
        return ConversationHandler.END

    speakers = event.speakers.all()
    if not speakers:
        update.message.reply_text("–ù–∞ —ç—Ç–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –Ω–µ—Ç —Å–ø–∏–∫–µ—Ä–æ–≤")
        return ConversationHandler.END

    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏–∫–µ—Ä–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞:",
        reply_markup=get_ask_speaker_keyboard(speakers)
    )
    return SELECTING_SPEAKER


def ask_speaker_select(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–∏–∫–µ—Ä–∞"""
    query = update.callback_query
    query.answer()

    if query.data == 'back':
        query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())
        return ConversationHandler.END

    speaker_username = query.data.split('_', 1)[1]
    context.user_data['speaker_username'] = speaker_username

    query.edit_message_text(
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')]
        ])
    )
    return AWAITING_QUESTION


def ask_speaker_receive_question(update, context):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    question_text = update.message.text
    context.user_data['question_text'] = question_text

    update.message.reply_text(
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{question_text}",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')]
        ])
    )
    return CONFIRMING_QUESTION


def ask_speaker_confirm(update, context):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞"""
    query = update.callback_query
    query.answer()

    if query.data == 'confirm':
        try:
            result = send_question(
                speaker_username=context.user_data['speaker_username'],
                participant_id=update.effective_user.id,
                participant_name=update.effective_user.first_name,
                text=context.user_data['question_text']
            )
            query.edit_message_text("‚úÖ –í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏–∫–µ—Ä—É")
        except Exception as e:
            query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}")
    else:
        query.edit_message_text("‚ùå –í–æ–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω")

    return ConversationHandler.END


def ask_speaker_cancel(update, context):
    """–û—Ç–º–µ–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞"""
    query = update.callback_query
    query.answer()
    query.edit_message_text("‚ùå –í–æ–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω")
    return ConversationHandler.END


def setup_dispatcher(dp):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", start))  # –ü–æ–º–æ—â—å —Ç–æ–∂–µ –≤–µ–¥–µ—Ç –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é)
    dp.add_handler(MessageHandler(Filters.regex('^üìÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞$'), program))
    dp.add_handler(MessageHandler(Filters.regex('^üéÅ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å$'), donate))
    dp.add_handler(MessageHandler(Filters.regex('^–ö—Ç–æ –≤—ã—Å—Ç—É–ø–∞–µ—Ç —Å–µ–π—á–∞—Å\?$'), current_speaker))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ —Å–ø–∏–∫–µ—Ä–∞–º
    ask_speaker_conv = ConversationHandler(
        entry_points=[
            MessageHandler(Filters.regex('^üìã–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–∏–∫–µ—Ä—É$'), ask_speaker_start)
        ],
        states={
            SELECTING_SPEAKER: [
                CallbackQueryHandler(ask_speaker_select, pattern='^ask_'),
                CallbackQueryHandler(ask_speaker_cancel, pattern='^back$'),
            ],
            AWAITING_QUESTION: [
                MessageHandler(Filters.text & ~Filters.command, ask_speaker_receive_question),
                CallbackQueryHandler(ask_speaker_cancel, pattern='^cancel$'),
            ],
            CONFIRMING_QUESTION: [
                CallbackQueryHandler(ask_speaker_confirm, pattern='^confirm$'),
                CallbackQueryHandler(ask_speaker_cancel, pattern='^cancel$'),
            ],
        },
        fallbacks=[
            CommandHandler('cancel', ask_speaker_cancel),
            CallbackQueryHandler(ask_speaker_cancel, pattern='^cancel$'),
        ],
    )

    dp.add_handler(ask_speaker_conv)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–Ω–∞—Ç–æ–≤
    dp.add_handler(CallbackQueryHandler(handle_fixed_donate_callback, pattern='^donate_\\d+$'))

    donate_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_custom_donate_callback, pattern='^donate_custom$')],
        states={
            CHOOSE_CUSTOM_AMOUNT: [MessageHandler(Filters.text & ~Filters.command, handle_custom_amount)]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    dp.add_handler(donate_conv_handler)

    return dp


def start_bot():
    updater = Updater(settings.TG_BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    updater.bot.set_my_commands([
        BotCommand("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("program", "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"),
        BotCommand("donate", "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"),
        BotCommand("help", "–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É")
    ])

    dp = setup_dispatcher(dp)
    updater.start_polling()
    updater.idle()
