from telegram.ext import (
    Updater,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    Filters,
    ConversationHandler
)
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from django.conf import settings
from events_bot.models import Event, Participant, Donation
from yookassa import Payment, Configuration
import uuid

CHOOSE_CUSTOM_AMOUNT = range(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ÆKassa
Configuration.account_id = settings.YOOKASSA_SHOP_ID
Configuration.secret_key = settings.YOOKASSA_SECRET_KEY


def start(update, context):
    user = update.message.from_user
    Participant.objects.get_or_create(
        telegram_id=user.id,
        defaults={
            'telegram_username': user.username,
            'name': user.first_name or '–ê–Ω–æ–Ω–∏–º'
        }
    )

    event = Event.objects.filter(is_active=True).first()
    event_name = event.title if event else "Python Meetup"

    update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è {event_name}\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
        "/program - –ø—Ä–æ–≥—Ä–∞–º–º–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n"
        "/donate - –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
    )


def program(update, context):
    event = Event.objects.filter(is_active=True).first()
    if event:
        update.message.reply_text(event.get_program())
    else:
        update.message.reply_text("–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")


def donate(update, context):
    if not Event.objects.filter(is_active=True).exists():
        update.message.reply_text("–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –¥–æ–Ω–∞—Ç–∞")
        return

    keyboard = [
        [InlineKeyboardButton("100 ‚ÇΩ", callback_data='donate_100')],
        [InlineKeyboardButton("300 ‚ÇΩ", callback_data='donate_300')],
        [InlineKeyboardButton("500 ‚ÇΩ", callback_data='donate_500')],
        [InlineKeyboardButton("–î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data='donate_custom')],
    ]
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


def handle_fixed_donate_callback(update, context):
    query = update.callback_query
    query.answer()

    if not Event.objects.filter(is_active=True).exists():
        query.edit_message_text("–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –¥–æ–Ω–∞—Ç–∞")
        return ConversationHandler.END

    try:
        amount = int(query.data.split('_')[1])
        create_payment(update, context, amount)
    except (IndexError, ValueError):
        query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã.")
    return ConversationHandler.END


def handle_custom_donate_callback(update, context):
    query = update.callback_query
    query.answer()

    if not Event.objects.filter(is_active=True).exists():
        query.edit_message_text("–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –¥–æ–Ω–∞—Ç–∞")
        return ConversationHandler.END

    query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞ –≤ —Ä—É–±–ª—è—Ö (–æ—Ç 10 –¥–æ 15000):")
    return CHOOSE_CUSTOM_AMOUNT


def handle_custom_amount(update, context):
    try:
        amount = int(update.message.text.strip())
        if amount < 10 or amount > 15000:
            update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 10 –¥–æ 15000 ‚ÇΩ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:")
            return CHOOSE_CUSTOM_AMOUNT

        create_payment(update, context, amount)
        return ConversationHandler.END

    except ValueError:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 250):")
        return CHOOSE_CUSTOM_AMOUNT


def cancel(update, context):
    update.message.reply_text("–î–æ–Ω–∞—Ç –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END


def create_payment(update, context, amount):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª update (–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ callback)
    if update.callback_query:
        user = update.callback_query.from_user
        chat_id = update.callback_query.message.chat_id
    else:
        user = update.message.from_user
        chat_id = update.message.chat_id

    event = Event.objects.filter(is_active=True).first()
    if not event:
        error_msg = "–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –¥–æ–Ω–∞—Ç–∞"
        if update.callback_query:
            update.callback_query.edit_message_text(error_msg)
        else:
            update.message.reply_text(error_msg)
        return

    participant, _ = Participant.objects.get_or_create(
        telegram_id=user.id,
        defaults={
            'telegram_username': user.username,
            'name': user.first_name or '–ê–Ω–æ–Ω–∏–º'
        }
    )

    try:
        payment = Payment.create({
            "amount": {"value": str(amount), "currency": "RUB"},
            "confirmation": {
                "type": "redirect",
                "return_url": f"https://t.me/{settings.TG_BOT_USERNAME}"
            },
            "description": f"–î–æ–Ω–∞—Ç –Ω–∞ {event.title}",
            "metadata": {
                "user_id": user.id,
                "event_id": event.id
            }
        }, str(uuid.uuid4()))

        Donation.objects.create(
            event=event,
            participant=participant,
            amount=amount,
            payment_id=payment.id,
            is_confirmed=True
        )

        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton(
            "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å",
            url=payment.confirmation.confirmation_url
        )]])

        message = f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã {amount}‚ÇΩ:"
        if update.callback_query:
            update.callback_query.edit_message_text(message, reply_markup=reply_markup)
        else:
            context.bot.send_message(chat_id, message, reply_markup=reply_markup)

        event = Event.objects.filter(is_active=True).first()
        event_name = event.title if event else "Python Meetup"

        context.bot.send_message(
            chat_id=chat_id,
            text=f"‚ú®<b>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É {event_name}!</b>\n\n"
                 f"–¢–≤–æ–π –¥–æ–Ω–∞—Ç {amount}‚ÇΩ ‚Äî —ç—Ç–æ:\n"
                 f"‚Ä¢ ‚òï 10 —á–∞—à–µ–∫ –∫–æ—Ñ–µ –¥–ª—è —Å–ø–∏–∫–µ—Ä–æ–≤\n"
                 f"‚Ä¢ üìö –ù–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                 f"‚Ä¢ üíª –õ—É—á—à–µ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π\n\n"
                 f"<i>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –∫–æ–º—å—é–Ω–∏—Ç–∏!</i>",
            parse_mode='HTML'
        )

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}"
        if update.callback_query:
            update.callback_query.edit_message_text(error_msg)
        else:
            context.bot.send_message(chat_id, error_msg)


def setup_dispatcher(dp):
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("program", program))
    dp.add_handler(CommandHandler("donate", donate))

    dp.add_handler(CallbackQueryHandler(handle_fixed_donate_callback, pattern='^donate_\\d+$'))

    donate_conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(handle_custom_donate_callback, pattern='^donate_custom$')
        ],
        states={
            CHOOSE_CUSTOM_AMOUNT: [
                MessageHandler(Filters.text & ~Filters.command, handle_custom_amount)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    dp.add_handler(donate_conv_handler)

    return dp


def start_bot():
    updater = Updater(settings.TG_BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp = setup_dispatcher(dp)

    updater.start_polling()
    updater.idle()
